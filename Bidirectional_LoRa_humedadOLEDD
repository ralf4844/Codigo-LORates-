#include "LoRaWan_APP.h"
#include "Arduino.h"
#include <Wire.h>
#include "cubecell_SSD1306Wire.h"

 SSD1306Wire  display(0x3c, 500000, I2C_NUM_0,GEOMETRY_128_64 ); // addr , freq , i2c group , resolution , rst, for AB02


#define time_deepsleep 4000
static TimerEvent_t wakeUp;

int voltaje =GPIO3;
#include "DHT.h"

#define DHTPIN GPIO1     // Pin donde est√° conectado el sensor
#define DHTTYPE DHT11   // Descomentar si se usa el DHT 11
DHT dht(DHTPIN, DHTTYPE);

#ifndef LoraWan_RGB
#define LoraWan_RGB 0
#endif

#define RF_FREQUENCY                                923000000 // Hz

#define TX_OUTPUT_POWER                             14        // dBm

#define LORA_BANDWIDTH                              0         // [0: 125 kHz,
                                                              //  1: 250 kHz,
                                                              //  2: 500 kHz,
                                                              //  3: Reserved]
#define LORA_SPREADING_FACTOR                       9         // [SF7..SF12]

#define LORA_CODINGRATE                             1         // [1: 4/5,
                                                              //  2: 4/6,
                                                              //  3: 4/7,
                                                              //  4: 4/8]
#define LORA_PREAMBLE_LENGTH                        8         // Same for Tx and Rx
#define LORA_SYMBOL_TIMEOUT                         0         // Symbols
#define LORA_FIX_LENGTH_PAYLOAD_ON                  false
#define LORA_IQ_INVERSION_ON                        false


#define RX_TIMEOUT_VALUE                            1000
#define BUFFER_SIZE                                 30 // Define the payload size here

char txpacket[BUFFER_SIZE];
char rxpacket[BUFFER_SIZE];
char x[8];
static RadioEvents_t RadioEvents;
void OnTxDone( void );
void OnTxTimeout( void );
void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr );

typedef enum
{
    LOWPOWER,
    RX,
    TX
}States_t;

int16_t txNumber;
States_t state;
bool sleepMode = false;
bool RX_done_flag = false;
int16_t Rssi,rxSize;


void onWakeUp()
{
  Serial.printf("Woke up");
  leer_sensor();  
  state=TX;
}
void leer_sensor(){
 dht.begin();
 float t = dht.readTemperature(); //Leemos la temperatura en grados Celsius
 dtostrf(t,5,2,x);
  //--------Enviamos las lecturas por el puerto serial-------------
  
  Serial.print("Temperatura: ");
  Serial.print(x);
  Wire.end();  
}
void imprimir_oled(){
pinMode(Vext,OUTPUT);
digitalWrite(Vext,LOW);
    delay(5);
    display.init();
    display.clear();
    display.setFont(ArialMT_Plain_16);
    display.setTextAlignment(TEXT_ALIGN_CENTER);
    display.drawString(50, 0, "MODO RX");
    display.setTextAlignment(TEXT_ALIGN_LEFT);
    display.setFont(ArialMT_Plain_10);
    display.drawString(0, 22, "RECIBIENDO PAQUETES");
    display.display();
    Wire.end();
}
void setup() {
    Serial.begin(115200);

    txNumber=0;
    Rssi=0;

    RadioEvents.TxDone = OnTxDone;
    RadioEvents.TxTimeout = OnTxTimeout;
    RadioEvents.RxDone = OnRxDone;

    Radio.Init( &RadioEvents );
    Radio.SetChannel( RF_FREQUENCY );
    Radio.SetTxConfig( MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
                                   LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                                   LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                                   true, 0, 0, LORA_IQ_INVERSION_ON, 3000 );

    Radio.SetRxConfig( MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
                                   LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                                   LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                                   0, true, 0, 0, LORA_IQ_INVERSION_ON, true );
    state=TX;
    TimerInit( &wakeUp, onWakeUp );
}



void loop()
{
  switch(state)
  {
    case TX:
      turnOffRGB();
//      delay();
     // leer_sensor();
      txNumber++;
      sprintf(txpacket,"temeratura es :%s C ",x);
        //sprintf(txpacket,"%s","hello");
        //sprintf(txpacket+strlen(txpacket),"%d",txNumber);
        //sprintf(txpacket+strlen(txpacket),"%s"," Rssi : ");
        //sprintf(txpacket+strlen(txpacket),"%d",Rssi);
       //
       //turnOnRGB(COLOR_SEND,0);

        Serial.printf("\r\nsending packet \"%s\" , length %d\r\n",txpacket, strlen(txpacket));

        Radio.Send( (uint8_t *)txpacket, strlen(txpacket) );
        state=LOWPOWER;
        break;
    case RX:
      Serial.println("into RX mode");
        Radio.Rx( 0 );
        state=LOWPOWER;
        
        if (RX_done_flag) //RX done
      {
          Radio.Sleep( );
          RX_done_flag= false; //reset Flag

          TimerSetValue( &wakeUp, time_deepsleep );//Set wakeup timer
          TimerStart( &wakeUp );//start timer
          state=LOWPOWER; 
      }
      else {
        delay(5);
      }
        break;
    case LOWPOWER:
      lowPowerHandler();
        break;
        default:
            break;
  }
    Radio.IrqProcess( );
}

void OnTxDone( void )
{
  Serial.print("TX done......");
 // turnOnRGB(0,0);
  state=RX;
}

void OnTxTimeout( void )
{
    Radio.Sleep( );
    Serial.print("TX Timeout......");
    state=TX;
}
void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
    Rssi=rssi;
    rxSize=size;
    memcpy(rxpacket, payload, size );
    rxpacket[size]='\0';
    imprimir_oled();
    RX_done_flag= true;
    Radio.Sleep( );

    Serial.printf("\r\nreceived packet \"%s\" with Rssi %d , length %d\r\n",rxpacket,Rssi,rxSize);
    Serial.println("wait to send next packet");
    delay(1000);
    turnOffRGB();
    state=RX;
    
}
